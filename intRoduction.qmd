---
title: "IntRoduction"
author: "Bernard Surial"
institute: "Infektiologie | Inselspital Bern"
format: 
  revealjs:
    theme: default
    preview-links: auto
editor: visual
from: markdown+emoji
---

## Outline Day 1

-   Look at and feel **R** and **R-Studio**
-   Tips and best practices for project management
-   Getting the engine started
-   Introduction to `tidyverse`

## Look at and feel **R** and **R-Studio**

![](figs/Rlogos.png){fig-align="center"}

## Look at and feel **R** and **R-Studio**

## Project management: (1) Folders

-   Use an `r-projects` folder for everything R related
-   Use one folder for each project
-   My default folders for each project
    -   :open_file_folder: `data`: raw data (never overwrite those files!)
    -   :open_file_folder: `processed`: modified data
    -   :open_file_folder: `scripts`: contains all R scripts
    -   :open_file_folder: `graphs`: for my nice plots

## Project management: (1) Folders

::: {layout="[[-1], [1], [-1]]"}
![](figs/folders.png)
:::

## Project management: (2) Scripts

-   All scripts go into the `scripts` folder
-   Use numbered prefixes such as `01-`, `02-` etc.
-   Create pipelines to be run in a sequence
    -   :point_up: `01-xxx.R` cannot depend on `02-xxx.R`
-   Use the same prefix for all outputs from that script (e.g. graphs, datasets)
-   `# Comment` your scripts. ⌘ + ⇧ + C / crtl + ⇧ + C is your friend

## 

::: {layout="[[-1], [1], [1], [-1]]"}
> **"In every project you have at least one other collaborator: future-you. You don't want future-you to curse past-you"** *Hadley Wickham*
:::

![](figs/hadley-pic.jpeg){.absolute top="300" left="350" width="300"}

## 

::: {layout="[[-0.5], [1], [-1]]"}
> **"If the first line of your R script is\
> **`setwd("C:\Jenny\path\that\only\I\have")`**\
> **I will come into your office and**\
> **SET YOUR COMPUTER ON FIRE :fire:."\
> *Jenny Bryan*
:::

![](figs/jenny-pic.jpeg){.absolute top="300" left="700" width="300"}

## 

::: {layout="[[-0.5], [1], [-1]]"}
> **"If the first line of your R script is\
> **`rm(list = ls())`**\
> **I will come into your office and**\
> **SET YOUR COMPUTER ON FIRE :fire:."\
> *Jenny Bryan*
:::

![](figs/jenny-pic.jpeg){.absolute top="300" left="700" width="300"}

## Project management: (3) Projects

-   Hard-wired absolute paths do not travel well (time and space)
    -   You change a folder and all the code breaks!
    -   Code only runs on your machine, not on mine!
-   Switching between projects becomes tedious
    -   `rm(list = ls())` does not eliminate everything :-1:
    -   To **RESTART** R is a better solution :+1:

## Project management: (3) Projects

![](figs/rstudio-workspace.png)

## 

And while we're there: ![](figs/rainbows.png)

## Project management: (3) Projects

-   Automatically sets the working directory for Project A to Project A
-   Makes switching from Project A to Project B very easy
-   All paths are relative by default
-   You can work simultaneously on ≥ 1 project ![](figs/r-project-icon.png){.absolute top="450" left="750" width="200"}

------------------------------------------------------------------------

## Project management: (3) Projects

Let's setup a new project together.

For more details on "Project-oriented" workflows, see Jenny Bryans excellent website:

::: {style="text-align: center; margin-top: 1em"}
[What They Forgot to Teach You About R](https://rstats.wtf/){preview-link="true" style="text-align: center"}
:::

------------------------------------------------------------------------

## Steps in a data analysis project

![](figs/data-science.png){.absolute top="250" left="220" height="250"}

## Tidyverse provides tools for each step

![](figs/tidyverse-package-workflow.png)

------------------------------------------------------------------------

## Loading libraries

```{r}
#| echo: true
#| message: true
library(tidyverse)
```

```{r}
#| echo: true

# Read sample data
who_dat <- read_rds("data/who_clean.rds")
```

## Our first graph! {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
who_dat %>% 
  filter(country %in% c("Germany", "United States of America", 
                        "Brazil", "Afghanistan")) %>% 
  group_by(country, year) %>% 
  summarise(n = sum(value)) %>% 
  ggplot(aes(x = year, y = n)) + 
  geom_line(aes(color = country), size = 1) + 
  geom_point(aes(color = country), shape = 21, fill = "white", size = 3) + 
  facet_wrap(~country, scales = "free_y") + 
  labs(x = "Year", 
       y = "N of pulmonary TB cases", 
       color = "Country", 
       caption = "Data Source: Global Tuberculosis Report") + 
  theme_minimal() + 
  theme(legend.position = "None")

```

## Dplyr basics:

-   `filter()`: pick observations by their values
-   `select()`: pick variables by their names
-   `arrange()`: reorder the rows
-   `mutate()`: create new variables with functions of existing variables
-   `summarise()`: collapse many values down to a single summary

## Let's look at the TB data again

```{r}
#| echo: true
who_dat
```

------------------------------------------------------------------------

## Pipe operator

![](figs/magrittr.jpeg)

Shortcut: ⌘ + ⇧ + M / crtl + ⇧ + M

You can think of it as **"...and then..."**.

------------------------------------------------------------------------

## Pipe operator

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  head(1)
```

:smirk:

```{r}
#| echo: true
head(filter(who_dat, country == "Brazil"), 1)
```

:weary:

------------------------------------------------------------------------

### `filter()`: pick observations by their values

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil")
```

## Logical operators

![](figs/logicals.png)

Special case: `is.na()`

------------------------------------------------------------------------

### `select()`: pick variables by their names

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(country, year, diag, gender, agegroup, value)

# You could also use select(-c(iso2, iso3))
```

Useful "helpers" with select: `starts_with()`, `contains()`

------------------------------------------------------------------------

### `arrange()`: reorder the rows

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  arrange(value) 
```

------------------------------------------------------------------------

### `arrange()`: reorder the rows

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  arrange(desc(value)) 
```

------------------------------------------------------------------------

### `mutate()`: create new variables

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  mutate(total_n_cases = sum(value))
```

------------------------------------------------------------------------

### `mutate()`: create new variables

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  mutate(mean_n_cases = mean(value))
```

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  summarise(total_n_cases = sum(value))
```

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country == "Brazil") %>% 
  select(-c(iso2, iso3)) %>% 
  group_by(year) %>% 
  summarise(total_n_cases = sum(value))
```

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country %in% c("Brazil", "Germany")) %>% 
  select(-c(iso2, iso3)) %>% 
  group_by(country) %>% 
  summarise(total_n_cases = sum(value))
```

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country %in% c("Brazil", "Germany")) %>% 
  select(-c(iso2, iso3)) %>% 
  group_by(country, year) %>% 
  summarise(total_n_cases = sum(value)) %>% 
  print(n = 31) # So that all rows are shown to us
```

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country %in% c("Brazil", "Germany")) %>% 
  select(-c(iso2, iso3)) %>% 
  count(agegroup)
```

Count is a special case of summarise...

------------------------------------------------------------------------

### `summarise()`: collapse values to a single one

```{r}
#| echo: true
who_dat %>% 
  filter(country %in% c("Brazil", "Germany")) %>% 
  select(-c(iso2, iso3)) %>% 
  group_by(country) %>% 
  count(agegroup)
```

...and works excellent on grouped data!

------------------------------------------------------------------------

## Our first graph! {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
who_dat %>% 
  filter(country %in% c("Germany", "United States of America", 
                        "Brazil", "Afghanistan")) %>% 
  group_by(country, year) %>% 
  summarise(n = sum(value)) %>% 
  ggplot(aes(x = year, y = n)) + 
  geom_line(aes(color = country), size = 1) + 
  geom_point(aes(color = country), shape = 21, fill = "white", size = 3) + 
  facet_wrap(~country, scales = "free_y") + 
  labs(x = "Year", 
       y = "N of pulmonary TB cases", 
       color = "Country", 
       caption = "Data Source: Global Tuberculosis Report") + 
  theme_minimal() + 
  theme(legend.position = "None")

```

------------------------------------------------------------------------

## Cheat sheet to the rescue!

![](figs/dplyr-cheatsheet.png){fig-align="center"}

You find cheat sheets under: **Help** \> **Cheat Sheets**

------------------------------------------------------------------------

## Futher options to get help

-   `?mutate()` or any other function
-   Google, e.g. "count observations dplyr"
-   <https://stackoverflow.com/>

------------------------------------------------------------------------

## Outline Day 2

-   Repeat dplyr basics
-   Join datasets
-   Create first graph using `ggplot2`
-   Learn about **Tidy Data**

------------------------------------------------------------------------

We want to look at the TB data in relation to the population. The Gapminder dataset provides the data we need.

```{r}
#| echo: true
pop <- read_rds("data/gapminder_data.rds")

pop
```

------------------------------------------------------------------------

We will only look at the most recent year, which is 2007.

```{r}
#| echo: true
pop07 <- pop %>% 
  filter(year == 2007)

pop07
```

------------------------------------------------------------------------

We still have more than one observation per year in our TB dataset. Lets use summarise to collapse to one value per country.

```{r}
#| echo: true
tb07 <- who_dat %>% 
  filter(year == 2007) %>% 
  group_by(country) %>% 
  summarise(tb_cases = sum(value)) %>% 
  ungroup()

tb07
```

------------------------------------------------------------------------

Now we can join the 2 datasets together...

```{r}
#| echo: true
data07 <- tb07 %>% 
  left_join(pop07)

data07
```

------------------------------------------------------------------------

...and calculate the TB incidence per 100'000 persons.

```{r}
#| echo: true
data07 <- data07 %>% 
  select(-lifeExp, -gdpPercap) %>% # We don't need those 2 variables
  mutate(tb_incidence = tb_cases / pop * 100000) %>% 
  filter(!is.na(tb_incidence))
  


data07
```

------------------------------------------------------------------------

##  {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
data07 %>% 
  ggplot(aes(y = country, x = tb_incidence)) + 
  geom_point() + 
  labs(x = "Pulmonary TB, Incidence per 100'000 people (in 2007)", 
       y = "Counry", 
       caption = "WHO TB report") + 
  theme_minimal()
```

------------------------------------------------------------------------

##  {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
data07 %>% 
  mutate(country = fct_reorder(country, tb_incidence)) %>% 
  ggplot(aes(y = country, x = tb_incidence)) + 
  geom_point() + 
  scale_x_log10() + 
  labs(x = "Pulmonary TB, TB Incidence per 100'000 people (in 2007)", 
       y = "Counry", 
       caption = "WHO TB report") + 
  theme_minimal()
```

------------------------------------------------------------------------

##  {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
data07 %>% 
  mutate(country = fct_reorder(country, tb_incidence)) %>% 
  ggplot(aes(y = country, x = tb_incidence)) + 
  geom_point(aes(color = continent)) + 
  scale_x_log10() +
  scale_y_discrete(guide = guide_axis(check.overlap = TRUE)) + 
  labs(x = "Pulmonary TB, Incidence per 100'000 people (in 2007)", 
       y = "Counry", 
       caption = "WHO TB report", 
       color = NULL) + 
  theme_minimal()
```

------------------------------------------------------------------------

For those who are surprised about the low incidence:\
Remeber our TB dataset only includes new lung-TB cases of men \<25 years:

```{r}
#| echo: true
who_dat %>% 
  count(gender, agegroup)
```

------------------------------------------------------------------------

## Joining datasets together

![](figs/join-venn.png)

-   `left_join()` keeps all observations in x.
-   `right_join()` keeps all observations in y.
-   `full_join()` keeps all observations in x and y.

------------------------------------------------------------------------

## Factors

Factors help you to organize characters in the way you want. If you don't mind the order, you don't need factors. I use them mainly for:

-   **Graphs**: logical order to convey a message
-   **Tables**: order them e.g. by frequency
-   **Models**: to set the "reference" category

------------------------------------------------------------------------

## Some examples:

Set factor levels:

``` r
factor(variable, levels = c("level1", "level2", "level3"))
```

Arrange factors from `a` according to values of `b`:

``` r
data %>% 
  mutate(a = fct_reorder(a, b))
```

Lump many levels to a limited set of factors (here top 5):

``` r
data %>% 
  mutate(lumped_categories = fct_lump(many_categories, n = 5))
```

For more information: <https://r4ds.had.co.nz/factors.html>

------------------------------------------------------------------------

## Our example of `fct_reorder()` {.scrollable}

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "Show the code"
data07 %>% 
  mutate(country = fct_reorder(country, tb_incidence)) %>% 
  ggplot(aes(y = country, x = tb_incidence)) + 
  geom_point(aes(color = continent)) + 
  scale_x_log10() +
  scale_y_discrete(guide = guide_axis(check.overlap = TRUE)) + 
  labs(x = "Pulmonary TB, Incidence per 100'000 people (in 2007)", 
       y = "Counry", 
       caption = "WHO TB report", 
       color = NULL) + 
  theme_minimal()
```

------------------------------------------------------------------------

## Try to work with **tidy data**

1.  Each variable must have its own column.

2.  Each observation must have its own row.

3.  Each value must have its own cell.

![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)

------------------------------------------------------------------------

## Examples:

```{r}
mpg %>% 
  select(1:6)
```

Tidy :+1:

------------------------------------------------------------------------

## Examples:

```{r}
read_csv("data/penguin.csv") %>% 
  select(1:4)
```

Tidy :+1:

------------------------------------------------------------------------

## Examples:

```{r}
who %>% 
  filter(!is.na(new_sp_m014)) %>% 
  select(-contains("iso")) %>% 
  select(1:4)
```

Not tidy :-1:

------------------------------------------------------------------------

## Examples:

```{r}
who_dat
```

Not tidy :-1:

------------------------------------------------------------------------

## Examples:

```{r}
who_dat %>% 
  filter(country == "Afghanistan") %>% 
  uncount(value)
```

Tidy :+1:

------------------------------------------------------------------------

## Outline Day 3

-   Basics of `ggplot2`
-   Revisiting what we learned

------------------------------------------------------------------------

Let's work with the penguin dataset

```{r}
#| echo: true
penguin <- read_csv("data/penguin.csv")

penguin%>% 
  select(-c(island, sex, year)) %>% 
  head() 
```

------------------------------------------------------------------------

## Penguin dataset

![](figs/penguin-description.png)

------------------------------------------------------------------------

## Explore relationships: **Scatterplot**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```

----

## Explore relationships: **Scatterplot**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(color = "orange")
```

----

## Explore relationships: **Scatterplot**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(color = "orange", alpha = 0.5)
```

----

## Explore relationships: **Scatterplot**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(color = "orange", alpha = 0.5) + 
  labs(x = "Flipper length (mm)", 
       y = "Body mass (g)", 
       title = "Penguin weight increases with flipper length")
```

---

## Explore relationships: **Scatterplot**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species)) + 
  labs(x = "Flipper length (mm)", 
       y = "Body mass (g)", 
       title = "Penguin weight increases with flipper length")
```


## Explore trends: **Smoothing**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_smooth() + 
  geom_point(aes(color = species)) + 
  labs(x = "Flipper length (mm)", 
       y = "Body mass (g)", 
       title = "Standard smoothing is flexible")
```

## Explore trends: **Smoothing**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_smooth(method = "lm") + 
  geom_point(aes(color = species)) + 
  labs(x = "Flipper length (mm)", 
       y = "Body mass (g)", 
       title = "method = 'lm' imposes linear relastionship")
```


## Explore trends: **Smoothing**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_smooth(aes(color = species), method = "lm") + 
  geom_point(aes(color = species)) + 
  labs(x = "Flipper length (mm)", 
       y = "Body mass (g)", 
       title = "Different trends for each penguin")
```


## Explore Distributions: **Histogram**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = body_mass_g)) + 
  geom_histogram(aes(fill = species)) + 
  facet_wrap(~species)
```


## Explore Distributions: **Histogram**

```{r}
#| echo: true
penguin %>% 
  ggplot(aes(x = body_mass_g)) + 
  geom_histogram(aes(fill = species)) + 
  facet_wrap(~species) + 
  theme(legend.position = "None") # Legend is redundant, turn off
```


## Explore trends over time: **Line graph**

```{r}
#| echo: true
penguin_year <- penguin %>% 
  group_by(species) %>% 
  count(year)

penguin_year
```


## Explore trends over time: **Line graph**

```{r}
#| echo: true
penguin_year %>% 
  ggplot(aes(x = year, y = n)) + 
  geom_line(aes(color = species)) + 
  labs(x = "Sampling year", 
       y = "N of penguins sampled", 
       color = "Penguin")
```

## Anatomy of ggplot

```{.r}
<DATA> %>% 
  ggplot() + 
    <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

GEOM_FUNCTIONS:

- `geom_point()`: Scatterplot  
- `geom_bar()`: Barchart  
- `geom_col()`: Barchart, but you need to provide y  
- `geom_line()`: Linechart  
- `geom_histogram()`: Histogram  
- `geom_smooth()`: Flexible loess or gam smoother  

## Anatomy of ggplot

```{.r}
<DATA> %>% 
  ggplot() + 
    <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

MAPPINGS:

- `x` and `y`: Coordinate (axes)  
- `color`: Color (e.g. point)  
- `fill`: Fill (e.g. bar, area)  
- `size`: Size of point, thickness of lines  
- `shape`: Shape of points  
- `linetype`: solid line, dashed line etc  

## Some Inspiration



![](figs/tt_logo.png){fig-align="center"}


::: {style="text-align: center; margin-top: 1em"}
[Cédric Scherrer](https://github.com/Z3tt/TidyTuesday)  
<br> 
[Georgios Karamanis](https://github.com/gkaramanis/tidytuesday)
:::

## Cédric Scherrer


![](https://raw.githubusercontent.com/Z3tt/TidyTuesday/master/plots/2018_03/2018_03_GlobalMortality.png){.absolute top="100" left="150" width="800"}

## Georgios Karamanis


![](https://raw.githubusercontent.com/gkaramanis/tidytuesday/master/2019/2019-week-51/plots/dog-friendliness.png){.absolute top="80" left="250" width="600"}



## Resources

-   [R for Data Science](https://r4ds.had.co.nz/index.html)
-   [\@rstudiotips on Twitter](https://twitter.com/rstudiotips)
-   [What they forgot to teach you about R](https://rstats.wtf/)
-   [Happy Git with R](https://happygitwithr.com/)
-   [Stackoverflow](https://stackoverflow.com/)
-   [R Graphics Cookbook](https://r-graphics.org/)
-   [#TidyTuesday on Twitter](https://twitter.com/search?q=%23TidyTuesday&src=typeahead_click)
